#!/bin/sh
# Init script for Cerebro
# Generated by _Alexwii
### BEGIN INIT INFO
# Provides:          Cerebro
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Cerebro
# Description:       Admin Web Interface for Elasticsearch
### END INIT INFO

PATH=/usr/sbin:/usr/bin:/sbin:/bin

NAME=cerebro

DAEMON=/opt/cerebro/bin/$NAME

# Args will be personnalised in /opt/cerebro/conf/setup.conf
CONF=/opt/cerebro/conf/start.conf

ARGS="-Dpidfile.path=/var/run/cerebro/$NAME.pid $(cat $CONF)"

PIDFILE=/var/run/cerebro/$NAME.pid

SCRIPTNAME=/etc/init.d/$NAME

CEREBRO_USER=cerebro
CEREBRO_GROUP=cerebro

start() {

  # Ensure the log directory is setup correctly.
  [ ! -d "/var/log/cerebro/" ] && mkdir "/var/log/cerebro/"
  chown "$CEREBRO_USER":"$CEREBRO_GROUP" "/var/log/cerebro/"
  chmod 755 "/var/log/cerebro/"
  
  # Ensure the PID directory is setup correctly.
  [ ! -d "/var/run/cerebro/" ] && mkdir "/var/run/cerebro/"
  chown "$CEREBRO_USER":"$CEREBRO_GROUP" "/var/run/cerebro/"
  chmod 755 "/var/run/cerebro/"
  
  # If you use an apache proxy or another, it's necessary to reload him. If you don't use, comment this line and delete this comment. 
  /etc/init.d/httpd reload >> /dev/null 2>> /dev/null & 
  
  su -l $CEREBRO_USER -c "exec $DAEMON $ARGS" >> /var/log/cerebro/cerebro.stdout 2>> /var/log/cerebro/cerebro.stderr &
  
  echo "$NAME started"
  return 0
}

stop() {
  # Try a few times to kill TERM the program
  if status ; then
    pid=$(cat "$PIDFILE")
    echo "Killing $NAME (pid $pid) with SIGTERM"
    kill -TERM $pid
    # Wait for it to exit.
    for i in 1 2 3 4 5 ; do
      echo "Waiting $NAME (pid $pid) to die..."
      status || break
      sleep 1
    done
    if status ; then
      if [ "$KILL_ON_STOP_TIMEOUT" -eq 1 ] ; then
        echo "Timeout reached. Killing $NAME (pid $pid) with SIGKILL.  This may result in data loss."
        kill -KILL $pid
        echo "$NAME killed with SIGKILL."
      else
        echo "$NAME stop failed; still running."
      fi
    else
      echo "$NAME stopped."
    fi
  fi
}

status() {
  if [ -f "$PIDFILE" ] ; then
    pid=$(cat "$PIDFILE")
    if ps -p $pid > /dev/null 2> /dev/null ; then
      return 0
    else
      return 2 # program is dead but pid file exists
    fi
  else
    return 3 # program is not running
  fi
}

force_stop() {
  if status ; then
    stop
    status && kill -KILL $(cat "$pidfile")
  fi
}


case "$1" in
  force-start|start|stop|force-stop|restart)
    ;;
esac

case "$1" in
  force-start)
    PRESTART=no
    exec "$0" start
    ;;
  start)
    status
    code=$?
    if [ $code -eq 0 ]; then
      echo "$NAME is already running"
      exit $code
    else
      start
      exit $?
    fi
    ;;
  stop) stop ;;
  force-stop) force_stop ;;
  status)
    status
    code=$?
    if [ $code -eq 0 ] ; then
      echo "$NAME is running"
    else
      echo "$NAME is not running"
    fi
    exit $code
    ;;
  restart)

    stop && start
    ;;
  *)
    echo "Usage: $SCRIPTNAME {start|force-start|stop|force-start|force-stop|status|restart}" >&2
    exit 3
  ;;
esac

exit $?
